import java.util.Scanner;
import java.util.Stack;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        int size = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character
        
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < size; i++) {
            int num = scanner.nextInt();
            stack.push(num);
        }
        
        sortStack(stack);
        
        System.out.println("-");
        while (!stack.isEmpty()) {
            System.out.println(stack.pop());
        }
    }
    
    public static void sortStack(Stack<Integer> stack) {
        int size = stack.size();
        
        for (int i = 0; i < size; i++) {
            int maxIndex = getMaxIndex(stack, size - i);
            inverte(stack, maxIndex);
            inverte(stack, size - i - 1);
        }
    }
    
    public static int getMaxIndex(Stack<Integer> stack, int count) {
        int maxIndex = -1;
        int max = Integer.MIN_VALUE;
        
        Stack<Integer> tempStack = new Stack<>();
        
        for (int i = 0; i < count; i++) {
            int current = stack.pop();
            if (current > max) {
                max = current;
                maxIndex = i;
            }
            tempStack.push(current);
        }
        
        // Restore the original stack
        for (int i = 0; i < count; i++) {
            stack.push(tempStack.pop());
        }
        
        return maxIndex;
    }
    
    public static void inverte(Stack<Integer> stack, int count) {
        Stack<Integer> tempStack = new Stack<>();
        
        for (int i = 0; i < count; i++) {
            tempStack.push(stack.pop());
        }
        
        for (int i = 0; i < count; i++) {
            stack.push(tempStack.pop());
        }
    }
}
